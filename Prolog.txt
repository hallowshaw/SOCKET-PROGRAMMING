move(1,A,_,C):-
	write('Move top disk from '),
	write(A),
	write('to '),
	write(C),
	nl.
move(N,A,B,C):-
	N>1,
	M is N-1,
	move(M,A,C,B),
	move(1,A,_,C),
	move(M,B,A,C).












water_jug(X,Y) :- X>4, Y<3, write('4L water jug overflowed'), nl.
water_jug(X,Y) :- X<4, Y>3, write('3L water jug overflowed'), nl.
water_jug(X,Y) :- X>4, Y>3, write('Both water jugs overflowed'), nl.

water_jug(X,Y) :-
  (X=:=0, Y=:=0, nl, write('4L:0 & 3L:3 (Action: Fill 3L jug)'), YY is 3, water_jug(X,YY));
  (X=:=0, Y=:=3, nl, write('4L:4 & 3L:0 (Action: Fill 4L jug)'), XX is 4, water_jug(XX,Y));
  (X=:=2, Y=:=0, nl, write('4L:2 & 3L:0 (Action: Goal State Reached....)'));
  (X=:=4, Y=:=0, nl, write('4L:1 & 3L:3 (Action: Pour water from 4L to 3L jug)'), XX is X-3, YY is 3, water_jug(XX,YY));
  (X=:=0, Y=:=3, nl, write('4L:3 & 3L:0 (Action: Pour water from 3L jug to 4L jug)'), XX is 3, YY is 0, water_jug(XX,YY));
  (X=:=1, Y=:=3, nl, write('4L:1 & 3L:0 (Action: Empty 3L jug)'), YY is 0, water_jug(X,YY));
  (X=:=3, Y=:=0, nl, write('4L:3 & 3L:3 (Action: Fill 3L jug)'), YY is 3, water_jug(X,YY));
  (X=:=3, Y=:=3, nl, write('4L:4 & 3L:2 (Action: Pour water from 3L jug to 4L jug until 4L jug is full)'), XX is X+1, YY is Y-1, water_jug(XX,YY));
  (X=:=1, Y=:=0, nl, write('4L:0 & 3L:1 (Action: Pour water from 4L jug to 3L jug)'), XX is Y, YY is X, water_jug(XX,YY));
  (X=:=0, Y=:=1, nl, write('4L:4 & 3L:1 (Action: Fill 4L jug)'), XX is 4, water_jug(XX,Y));
  (X=:=4, Y=:=1, nl, write('4L:2 & 3L:3 (Action: Pour water from 4L jug to 3L jug until 3L jug is full)'), XX is X-2, YY is Y+2, water_jug(XX,YY));
  (X=:=2, Y=:=3, nl, write('4L:2 & 3L:0 (Action: Empty 3L jug)'), YY is 0, water_jug(X,YY));
  (X=:=4, Y=:=2, nl, write('4L:0 & 3L:2 (Action: Empty 4L jug)'), XX is 0, water_jug(XX,Y));
  (X=:=0, Y=:=2, nl, write('4L:2 & 3L:0 (Action: Pour water from 3L jug to 4L jug)'), XX is Y, YY is X, water_jug(XX,YY)).













fact(0,1). % Base case: the factorial of 0 is 1
fact(N,F) :-
    N > 0, % Ensure N is positive
    N1 is N - 1,
    fact(N1,F1),
    F is N * F1.














% Define the base cases for 0 and 1
fib(0, 0) :- !.
fib(1, 1) :- !.

% Define the recursive case for N > 1
fib(N, F) :-
    N > 1,
    N1 is N - 1, fib(N1, F1),
    N2 is N - 2, fib(N2, F2),
    F is F1 + F2.

% Print the Fibonacci terms
print_fibonacci(N) :-
    between(0, N, I),
    fib(I, F),
    write(F), write(' '),
    fail.